server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;
    
    # location / {
    #     root   /usr/local/openresty/nginx/html;
    #     index  index.html index.htm;
    #     if ($http_x_forwarded_proto = 'http') {
    #         return 301 https://$host$request_uri;
    #     }
    # }

location ~ '^/' {
location ~ '^/' {
	default_type "application/json;charset=UTF-8";
        # you can redirect http to https directly in ALB - https://twitter.com/pahudnet/status/1022321490522333184
	# however, we still do this in nginx just in case
        if ($http_x_forwarded_proto = 'http') {
            return 301 https://$host$request_uri;
        }
        lua_need_request_body on;
        content_by_lua_block {
            local resp = {headers=nil, body=nil}
            local json_safe = require "cjson.safe"
            local jwt = require "resty.jwt"
            resp.headers = ngx.req.get_headers()
            local body_data = ngx.unescape_uri(ngx.var.request_body)
            local b = json_safe.decode(body_data)
            if not b then
            resp.body = body_data
            else
            resp.body = b
            end
            if resp.headers['x-amzn-oidc-data'] ~= nil then
                local jwt_obj = jwt:load_jwt(resp.headers['x-amzn-oidc-data'])
                resp['amzn-oidc-data'] = jwt_obj
                --resp.oidc = resp.headers['x-amzn-oidc-data']
            end
            resp.httpMethod = ngx.req.get_method()
            resp.queryStringParameters = ngx.req.get_uri_args()
            resp.path = ngx.var.uri
            ngx.print(  json_safe.encode(resp) ) 
        }
    }
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/local/openresty/nginx/html;
    }
}
